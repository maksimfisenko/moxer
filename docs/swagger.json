{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is a backend API of the Moxer application.",
        "title": "Moxer API",
        "contact": {
            "name": "Maksim Fisenko",
            "email": "fisenkomaksim.id@gmail.com"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login new user by given credentials (email, password)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "operationId": "login",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sucessfully registered new user",
                        "schema": {
                            "$ref": "#/definitions/responses.Token"
                        }
                    },
                    "400": {
                        "description": "Failed to parse request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to login",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "description": "Get current user by JWT token in Authorization header",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get current user",
                "operationId": "me",
                "responses": {
                    "200": {
                        "description": "Sucessfully fetched current user",
                        "schema": {
                            "$ref": "#/definitions/responses.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Failed to parse token",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch current user",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register new user by given credentials (email, password)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register",
                "operationId": "register",
                "parameters": [
                    {
                        "description": "Register request",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sucessfully registered new user",
                        "schema": {
                            "$ref": "#/definitions/responses.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Failed to parse request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to register",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "description": "Check if the application is up",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health Check",
                "operationId": "health-check",
                "responses": {
                    "200": {
                        "description": "Sucessfully received response from server",
                        "schema": {
                            "$ref": "#/definitions/responses.HealthcheckResponse"
                        }
                    }
                }
            }
        },
        "/templates": {
            "get": {
                "description": "Get all templates of certain user by given JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "templates"
                ],
                "summary": "Get user's templates",
                "operationId": "get-all-for-user",
                "responses": {
                    "200": {
                        "description": "Successfully fetched user's templates",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Template"
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to parse token",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch user's templates",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new template with provided request body and user id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "templates"
                ],
                "summary": "Create template",
                "operationId": "create-template",
                "parameters": [
                    {
                        "description": "Create template request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateTemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sucessfully created new template",
                        "schema": {
                            "$ref": "#/definitions/responses.Template"
                        }
                    },
                    "400": {
                        "description": "Failed to parse request body or token",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create new template",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "requests.CreateTemplateRequest": {
            "type": "object"
        },
        "requests.LoginRequest": {
            "description": "Login request",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "x-order": "0",
                    "example": "fisenkomaksim.id@gmail.com"
                },
                "password": {
                    "type": "string",
                    "x-order": "1",
                    "example": "11111111"
                }
            }
        },
        "requests.RegisterRequest": {
            "description": "Register request",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "x-order": "0",
                    "example": "fisenkomaksim.id@gmail.com"
                },
                "password": {
                    "type": "string",
                    "x-order": "1",
                    "example": "11111111"
                }
            }
        },
        "responses.ErrorResponse": {
            "description": "Error response",
            "type": "object",
            "required": [
                "error"
            ],
            "properties": {
                "error": {
                    "type": "string",
                    "example": "error message"
                }
            }
        },
        "responses.HealthcheckResponse": {
            "description": "Healthcheck response",
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "responses.Template": {
            "description": "Template response",
            "type": "object",
            "required": [
                "content",
                "created_at",
                "id",
                "name",
                "updated_at"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "x-order": "0",
                    "example": "7975a7ec-bfda-42ad-831d-0b250277e402"
                },
                "name": {
                    "type": "string",
                    "x-order": "1",
                    "example": "user"
                },
                "content": {
                    "type": "object",
                    "additionalProperties": {},
                    "x-order": "2"
                },
                "created_at": {
                    "type": "string",
                    "x-order": "3",
                    "example": "2025-07-09T18:43:23.239168298+03:00"
                },
                "updated_at": {
                    "type": "string",
                    "x-order": "4",
                    "example": "2025-07-09T18:43:23.239171581+03:00"
                }
            }
        },
        "responses.Token": {
            "description": "JWT Token",
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string",
                    "x-order": "0",
                    "example": "eyJhbGciOi..."
                }
            }
        },
        "responses.UserResponse": {
            "description": "User response without password",
            "type": "object",
            "required": [
                "created_at",
                "email",
                "id",
                "updated_at"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "x-order": "0",
                    "example": "7975a7ec-bfda-42ad-831d-0b250277e402"
                },
                "email": {
                    "type": "string",
                    "x-order": "1",
                    "example": "fisenkomaksim.id@gmail.com"
                },
                "created_at": {
                    "type": "string",
                    "x-order": "2",
                    "example": "2025-07-09T18:43:23.239168298+03:00"
                },
                "updated_at": {
                    "type": "string",
                    "x-order": "3",
                    "example": "2025-07-09T18:43:23.239171581+03:00"
                }
            }
        }
    }
}