basePath: /api/v1
consumes:
- application/json
definitions:
  errorsx.HTTPError:
    properties:
      message:
        example: error
        type: string
    required:
    - message
    type: object
  requests.CreateTemplateRequest:
    description: Request used for creating a new template
    properties:
      content:
        additionalProperties: {}
        type: object
        x-order: "1"
      name:
        example: user
        type: string
        x-order: "0"
    required:
    - content
    - name
    type: object
  requests.CredentialsRequest:
    description: Request containing user credentials used for registration and logging
      in
    properties:
      email:
        example: email@example.com
        type: string
        x-order: "0"
      password:
        example: Str0ngPassWoRD
        type: string
        x-order: "1"
    required:
    - email
    - password
    type: object
  responses.GeneratedData:
    description: Generated Data response
    properties:
      data:
        items:
          additionalProperties: {}
          type: object
        type: array
    required:
    - data
    type: object
  responses.HealthCheckResponse:
    description: Response used for the healthcheck requests
    properties:
      status:
        example: ok
        type: string
    required:
    - status
    type: object
  responses.Template:
    description: Responses containing information about a template
    properties:
      content:
        additionalProperties: {}
        type: object
        x-order: "2"
      created_at:
        example: "2025-07-09T18:43:23.239168298+03:00"
        type: string
        x-order: "3"
      id:
        example: 7975a7ec-bfda-42ad-831d-0b250277e402
        type: string
        x-order: "0"
      name:
        example: user
        type: string
        x-order: "1"
      updated_at:
        example: "2025-07-09T18:43:23.239171581+03:00"
        type: string
        x-order: "4"
    required:
    - content
    - created_at
    - id
    - name
    - updated_at
    type: object
  responses.Token:
    description: Response containing a unique generated JWT token
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30
        type: string
    required:
    - token
    type: object
  responses.UserResponse:
    description: Response containing information about user (without password)
    properties:
      created_at:
        example: "2025-07-09T18:43:23.239168298+03:00"
        type: string
        x-order: "2"
      email:
        example: email@example.com
        type: string
        x-order: "1"
      id:
        example: 7975a7ec-bfda-42ad-831d-0b250277e402
        type: string
        x-order: "0"
      updated_at:
        example: "2025-07-09T18:43:23.239171581+03:00"
        type: string
        x-order: "3"
    required:
    - created_at
    - email
    - id
    - updated_at
    type: object
host: localhost:8080
info:
  contact:
    email: fisenkomaksim.id@gmail.com
    name: Maksim Fisenko
  description: This is a backend API of the Moxer application.
  title: Moxer API
  version: "1.0"
paths:
  /private/auth/me:
    get:
      consumes:
      - application/json
      description: Get information about current user using a JWT token in Authorization
        header
      operationId: me
      produces:
      - application/json
      responses:
        "200":
          description: Sucessfully fetched current user
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "400":
          description: Invalid authentication token / User not found
          schema:
            $ref: '#/definitions/errorsx.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errorsx.HTTPError'
      summary: Get Current User
      tags:
      - auth
  /private/templates:
    get:
      consumes:
      - application/json
      description: Get all templates for a certain user by their JWT token
      operationId: get-all-for-user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched user's templates
          schema:
            items:
              $ref: '#/definitions/responses.Template'
            type: array
        "400":
          description: Invalid authentication token
          schema:
            $ref: '#/definitions/errorsx.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errorsx.HTTPError'
      summary: Get User's Template
      tags:
      - templates
    post:
      consumes:
      - application/json
      description: Create a new template with provided request body and user id
      operationId: create-template
      parameters:
      - description: Create template request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/requests.CreateTemplateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Sucessfully created new template
          schema:
            $ref: '#/definitions/responses.Template'
        "400":
          description: Invalid authentication token / Invalid request body / User
            not found
          schema:
            $ref: '#/definitions/errorsx.HTTPError'
        "409":
          description: Template with given name already exists
          schema:
            $ref: '#/definitions/errorsx.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errorsx.HTTPError'
      summary: Create Template
      tags:
      - templates
  /private/templates/:id/generate:
    post:
      consumes:
      - application/json
      description: Generate data for a selected template
      operationId: generate-data
      produces:
      - application/json
      responses:
        "200":
          description: Successfully generated data
          schema:
            items:
              $ref: '#/definitions/responses.GeneratedData'
            type: array
        "400":
          description: Invalid template id / Invalid request body / Template not found
          schema:
            $ref: '#/definitions/errorsx.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errorsx.HTTPError'
      summary: Generate Data
      tags:
      - templates
  /public/auth/login:
    post:
      consumes:
      - application/json
      description: Get a JWT token for a user by their credentials
      operationId: login
      parameters:
      - description: User's credentials used for logging in
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/requests.CredentialsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Sucessfully logged in a user
          schema:
            $ref: '#/definitions/responses.Token'
        "400":
          description: Invalid request body / User not found
          schema:
            $ref: '#/definitions/errorsx.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errorsx.HTTPError'
      summary: Login
      tags:
      - auth
  /public/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user by given credentials
      operationId: register
      parameters:
      - description: New user credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/requests.CredentialsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Sucessfully registered new user
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/errorsx.HTTPError'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/errorsx.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errorsx.HTTPError'
      summary: Register
      tags:
      - auth
  /public/healthz:
    get:
      description: Check if the application is up
      operationId: health-check
      produces:
      - application/json
      responses:
        "200":
          description: Sucessfully received response from the server
          schema:
            $ref: '#/definitions/responses.HealthCheckResponse'
      summary: Health Check
      tags:
      - health
produces:
- application/json
swagger: "2.0"
