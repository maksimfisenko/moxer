// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Maksim Fisenko",
            "email": "fisenkomaksim.id@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/private/auth/me": {
            "get": {
                "description": "Get information about current user using a JWT token in Authorization header",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get Current User",
                "operationId": "me",
                "responses": {
                    "200": {
                        "description": "Sucessfully fetched current user",
                        "schema": {
                            "$ref": "#/definitions/responses.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid authentication token / User not found",
                        "schema": {
                            "$ref": "#/definitions/errorsx.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errorsx.HTTPError"
                        }
                    }
                }
            }
        },
        "/private/templates": {
            "get": {
                "description": "Get all templates for a certain user by their JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "templates"
                ],
                "summary": "Get User's Template",
                "operationId": "get-all-for-user",
                "responses": {
                    "200": {
                        "description": "Successfully fetched user's templates",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.Template"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid authentication token",
                        "schema": {
                            "$ref": "#/definitions/errorsx.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errorsx.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new template with provided request body and user id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "templates"
                ],
                "summary": "Create Template",
                "operationId": "create-template",
                "parameters": [
                    {
                        "description": "Create template request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateTemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sucessfully created new template",
                        "schema": {
                            "$ref": "#/definitions/responses.Template"
                        }
                    },
                    "400": {
                        "description": "Invalid authentication token / Invalid request body / User not found",
                        "schema": {
                            "$ref": "#/definitions/errorsx.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Template with given name already exists",
                        "schema": {
                            "$ref": "#/definitions/errorsx.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errorsx.HTTPError"
                        }
                    }
                }
            }
        },
        "/private/templates/:id/generate": {
            "post": {
                "description": "Generate data for a selected template",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "templates"
                ],
                "summary": "Generate Data",
                "operationId": "generate-data",
                "responses": {
                    "200": {
                        "description": "Successfully generated data",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.GeneratedData"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid template id / Invalid request body / Template not found",
                        "schema": {
                            "$ref": "#/definitions/errorsx.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errorsx.HTTPError"
                        }
                    }
                }
            }
        },
        "/public/auth/login": {
            "post": {
                "description": "Get a JWT token for a user by their credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "operationId": "login",
                "parameters": [
                    {
                        "description": "User's credentials used for logging in",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CredentialsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sucessfully logged in a user",
                        "schema": {
                            "$ref": "#/definitions/responses.Token"
                        }
                    },
                    "400": {
                        "description": "Invalid request body / User not found",
                        "schema": {
                            "$ref": "#/definitions/errorsx.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errorsx.HTTPError"
                        }
                    }
                }
            }
        },
        "/public/auth/register": {
            "post": {
                "description": "Register a new user by given credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register",
                "operationId": "register",
                "parameters": [
                    {
                        "description": "New user credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CredentialsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sucessfully registered new user",
                        "schema": {
                            "$ref": "#/definitions/responses.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/errorsx.HTTPError"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/errorsx.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errorsx.HTTPError"
                        }
                    }
                }
            }
        },
        "/public/healthz": {
            "get": {
                "description": "Check if the application is up",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health Check",
                "operationId": "health-check",
                "responses": {
                    "200": {
                        "description": "Sucessfully received response from the server",
                        "schema": {
                            "$ref": "#/definitions/responses.HealthCheckResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errorsx.HTTPError": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "requests.CreateTemplateRequest": {
            "description": "Request used for creating a new template",
            "type": "object",
            "required": [
                "content",
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "x-order": "0",
                    "example": "user"
                },
                "content": {
                    "type": "object",
                    "additionalProperties": {},
                    "x-order": "1"
                }
            }
        },
        "requests.CredentialsRequest": {
            "description": "Request containing user credentials used for registration and logging in",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "x-order": "0",
                    "example": "email@example.com"
                },
                "password": {
                    "type": "string",
                    "x-order": "1",
                    "example": "Str0ngPassWoRD"
                }
            }
        },
        "responses.GeneratedData": {
            "description": "Generated Data response",
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                }
            }
        },
        "responses.HealthCheckResponse": {
            "description": "Response used for the healthcheck requests",
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "responses.Template": {
            "description": "Responses containing information about a template",
            "type": "object",
            "required": [
                "content",
                "created_at",
                "id",
                "name",
                "updated_at"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "x-order": "0",
                    "example": "7975a7ec-bfda-42ad-831d-0b250277e402"
                },
                "name": {
                    "type": "string",
                    "x-order": "1",
                    "example": "user"
                },
                "content": {
                    "type": "object",
                    "additionalProperties": {},
                    "x-order": "2"
                },
                "created_at": {
                    "type": "string",
                    "x-order": "3",
                    "example": "2025-07-09T18:43:23.239168298+03:00"
                },
                "updated_at": {
                    "type": "string",
                    "x-order": "4",
                    "example": "2025-07-09T18:43:23.239171581+03:00"
                }
            }
        },
        "responses.Token": {
            "description": "Response containing a unique generated JWT token",
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30"
                }
            }
        },
        "responses.UserResponse": {
            "description": "Response containing information about user (without password)",
            "type": "object",
            "required": [
                "created_at",
                "email",
                "id",
                "updated_at"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "x-order": "0",
                    "example": "7975a7ec-bfda-42ad-831d-0b250277e402"
                },
                "email": {
                    "type": "string",
                    "x-order": "1",
                    "example": "email@example.com"
                },
                "created_at": {
                    "type": "string",
                    "x-order": "2",
                    "example": "2025-07-09T18:43:23.239168298+03:00"
                },
                "updated_at": {
                    "type": "string",
                    "x-order": "3",
                    "example": "2025-07-09T18:43:23.239171581+03:00"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Moxer API",
	Description:      "This is a backend API of the Moxer application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
